<%= render 'shared/planningsteps', locals: {planning: @planning} %>

<div class="skeleton">
  <div class="row">
    <div class="col-xs-8-offset-4">
      <%  @slot_templates.each do |slot| %>
      <button class="btn" style="margin: 5px; border-color: grey; background-color: <%= Role.find_by_id(slot.role_id).role_color %>; border-radius: 6px;"> <%= slot.role.name %> </button>
      <% end %>
    </div>
  </div>
  <br>
  <div class="row">
    <div class="col-xs-4" id="slot_form" style="background-color: orange;"></div>
  </div>
  <div class="row">
    <div class="col-xs-12">
      <div id = "calendar">
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col-xs-5">
      <p>Create a slot</p>
      <!-- intégrer du date picker bootstrap dans simple form via gem https://github.com/Eonasdan/bootstrap-datetimepicker -->
      <%= simple_form_for [@planning, @slot] do |f| %>
      <%= f.error_notification %>
      <div class="form-group">
        <div class='input-group date' id='datetimepicker1'>
          <input name="slot[start_at]" type='text' value="<%= @slot.start_at %>" class="form-control" />
          <span class="input-group-addon">
            <span class="glyphicon glyphicon-calendar">
            </span>
          </span>
        </div>
      </div>
      <div class="form-group">
        <div class='input-group date' id='datetimepicker2'>
          <input name="slot[end_at]" type='text' value="<%= @slot.end_at %>" class="form-control" />
          <span class="input-group-addon">
            <span class="glyphicon glyphicon-calendar">
            </span>
          </span>
        </div>
      </div>
      <%= f.input :role_id, placeholder: "Role", label: false, collection: fetch_roles  %>
      <%= f.submit "Valider", class: "btn btn-success" %>
      <% end %>
    </div>
  </div>

  <%= content_for(:after_js) do %>
  <script type="text/javascript">
    $(function () {
      $('#datetimepicker1').datetimepicker();
      $('#datetimepicker2').datetimepicker();
    });
  </script>
  <script>
    $('#calendar').fullCalendar({
      //calendar attributes
      header: {
        left: 'prev,next today',
        center: 'title',
        right: 'agendaWeek,agendaDay'
      },
      locale: "fr",
      editable: true, // events on the calendar can be modified
      droppable: true, // allows things to be dropped onto the calendar
      minTime: "07:00:00", // starting time, even when scrolled all the way up
      maxTime: "22:00:00",
      defaultView: "agendaWeek",
      defaultDate: '<%= Date.commercial(@planning.year, @planning.week_number, 1).beginning_of_week %>', // s'ouvre sur le 1e lundi de la semaine sélectionnée
      hiddenDays: [ 0] , // hider dimanche
      height: "auto", // implique pas de scroll à l'intérieur du calendrier
      events: <%= raw @slots_array.to_json %>,

      // 2. cas où on drag-drop un event déjà existant dans le calendar
      eventDrop: function(event, delta, revertFunc, jsEvent, ui, view ) {
        // récupérer l'id de l'event que l'on droppe
        console.log("event title= " + event.title + "start= " + event.start.format() + "end= " + event.end.format());
        // modified start => event.start.format()
        // modified end  => event.end.format()
        // lors du display du form, il doit préremplir avec ces 2 dates VS les anciennes
      },
      // cas où on clique sur un évènement déjà existant dans le calendar
      eventClick: function(calEvent, jsEvent, view) {
        // récupérer l'id de l'event que l'on clique + planning id
        var id_slot = calEvent.id // contient id du slot cliqué
        var planning_id = calEvent.planning_id // contient planning_id du slot cliqué
        // 1 Requête Ajax: plannings/:id/slots/:id/edit.  > pour injecter event id + planning id dans la requete ajax ==> use react, cf https://karr.lewagon.com/lectures/rails/react#/4/2
        $.ajax({
          type: "GET",
          url: Routes.edit_planning_slot_path(planning_id, id_slot, { format: 'json' }),
          success: function(data) {
          // data = ce que le server renvoie = le JS du form du slot mais sans layout (le contenu du partial form pour ce slot) => '_form.html.erb'
          // on execute aussi le edit.js = l'instruction JS qui affiche ce form au bon endroit sur ta page => via 'edit.js'
              console.log("ok");
                                  },
          error: function(jqXHR) {
            console.log(jqXHR.responseText);
            console.log("nok");
                                  }
        });
      }
    });
  </script>
  <% end %>

